geom_line() +
theme_tufte2 +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
ord_pred %>%
ggplot(aes(y=estimate__,x=step_number)) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
1:10
ord_pred %>%
ggplot(aes(y=estimate__,x=1:100)) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
ord_pred %>%
ggplot(aes(y=estimate__,x=1:1000)) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
df
c(1, 10, 22)
seq(1, 100, length.out=5)
ord_pred %>%
ggplot(aes(y=estimate__,x=seq(1, 100, length.out=100))) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
ord_pred %>%
ggplot(aes(y=estimate__,x=seq(1, 1000, length.out=100))) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
ord_pred %>%
ggplot(aes(y=estimate__,x=seq(1, 100, length.out=100))) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
ord_pred %>%
ggplot(aes(y=estimate__,x=step_number)) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
ord_pred
ord_pred <- conditional_effects(fit_ord_est, condition = list("step_number" = 10:40))[[1]]
ord_pred %>%
ggplot(aes(y=estimate__,x=step_number)) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
ord_pred %>%
ggplot(aes(y=estimate__,x=step_number)) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
conditional_effects(fit_ord_est, condition = list("step_number" = 10:40))
library(marginaleffects)
install.packages("marginaleffects")
library(marginaleffects)
plot_predictions(ord_pred, condition = list("step_number" = 20:40))
ord_pred
plot_predictions(fit_ord_est, condition = list("step_number" = 20:40))
install.packages("collapse")
install.packages("collapse")
library(readr)
library(ordbetareg)
library(marginaleffects)
library(dplyr)
df <- read_csv("flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/df.csv")
fit_ord_est <- ordbetareg(l ~ 1 + step_number, data=df, chains=1,iter=2000,refresh=0)
plot_predictions(fit_ord_est, condition = list("step_number" = 20:30))
plot_predictions(fit_ord_est, condition = list("step_number" = 1:100))
plot_predictions(fit_ord_est, condition = list("step_number" = 1:1000))
plot_predictions(fit_ord_est, condition = list("step_number" = 0:100))
plot_predictions(fit_ord_est, condition = list("step_number" = 1:100))
fit_ord_est <- ordbetareg(l ~ 1 + step_number + (1|species/beetle), data=df, chains=1,iter=2000,refresh=0)
plot_predictions(fit_ord_est, condition = list("step_number" = 1:100))
plot_predictions(fit_ord_est, condition = list("species" = "S._ambiguus", step_number" = 1:100))
plot_predictions(fit_ord_est, condition = list("species" = "S._ambiguus", "step_number" = 1:100))
library(dplyr)
plot_predictions(fit_ord_est, condition = list("species" = "S._ambiguus", "step_number" = 1:100))
plot_predictions(fit_ord_est, condition = list("species" = "S._ambiguus", "beetle" = "Ambig_03", "step_number" = 1:100))
plot_predictions(fit_ord_est)
plot_predictions(fit_ord_est, condition = "step_number")
newdata = datagrid(step_number = 1:50, species = c("S._ambiguus", "Kheper_A"), beetle = c("Ambig_11", "KheperA_a03"))
newdata = datagrid(step_number = 1:50, species = c("S._ambiguus", "Kheper_A"), beetle = c("Ambig_11", "KheperA_a03"))
newdata = datagrid(step_number = 1:2, species = c("S._ambiguus", "Kheper_A"), beetle = c("Ambig_11", "KheperA_a03"))
newdata <- datagrid(step_number = 1:2, species = c("S._ambiguus", "Kheper_A"), beetle = c("Ambig_11", "KheperA_a03"))
datagrid(step_number = 1:2, species = c("S._ambiguus", "Kheper_A"), beetle = c("Ambig_11", "KheperA_a03"))
step_number = 1:2
datagrid(step_number = 1:2, species = c("S._ambiguus", "Kheper_A"), beetle = c("Ambig_11", "KheperA_a03"))
plot_predictions(fit_ord_est, newdata = datagrid(step_number = 1:2, species = c("S._ambiguus", "Kheper_A"), beetle = c("Ambig_11", "KheperA_a03")))
plot_predictions(fit_ord_est, condition = "step_number", newdata = datagrid(step_number = 1:2, species = c("S._ambiguus", "Kheper_A"), beetle = c("Ambig_11", "KheperA_a03")))
nd = datagrid(model = fit_ord_est, step_number = 1:2, species = c("S._ambiguus", "Kheper_A"), beetle = c("Ambig_11", "KheperA_a03"))
p1 <- predictions(fit_ord_est, type = "response", newdata = nd) |>
posterior_draws() |>
transform(type = "Response")
p2 <- predictions(fit_ord_est, type = "prediction", newdata = nd) |>
posterior_draws() |>
transform(type = "Prediction")
nd
nd = datagrid(model = fit_ord_est, step_number = 1:2, species = c("S._ambiguus"), beetle = c("Ambig_11"))
nd
nd = datagrid(model = fit_ord_est, step_number = 1:30, species = c("S._ambiguus"), beetle = c("Ambig_11"))
nd
p1 <- predictions(fit_ord_est, type = "response", newdata = nd) |>
posterior_draws() |>
transform(type = "Response")
p2 <- predictions(fit_ord_est, type = "prediction", newdata = nd) |>
posterior_draws() |>
transform(type = "Prediction")
summary(fit_ord_est)
fit_ord_est <- ordbetareg(l ~ 1 + step_number + (1|species/beetle), data=df, chains=1,iter=2000,refresh=0, adapt_delta=1.5)
fit_ord_est <- ordbetareg(l ~ 1 + step_number + (1|species/beetle), data=df, chains=1,iter=2000,refresh=0, control=list(adapt_delta=0.95))
summary(fit_ord_est)
fit_ord_est <- ordbetareg(l ~ 1 + step_number + (1|species/beetle), data=df, chains=1,iter=2000,refresh=0, control=list(adapt_delta=2.0))
install.packages("cmdstan
# we recommend running this in a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
summary(fit_ord_est)
install.packages("cmdstanr", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(readr)
df <- read_csv("flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/df.csv")
library(ordbetareg)
fit_ord_est <- ordbetareg(l ~ 1 + step_number + (1|species/beetle), data=df, chains=1,iter=2000,refresh=0, control=list(adapt_delta=1.0), threads=30)
fit_ord_est <- ordbetareg(l ~ 1 + step_number + (1|species/beetle), data=df, chains=1,iter=2000,refresh=0, control=list(adapt_delta=0.99), threads=30)
summary(fit_ord_est)
library(marginaleffects)
nd = datagrid(model = fit_ord_est, step_number = 1:30, species = c("S._ambiguus"), beetle = c("Ambig_11"))
p1 <- predictions(fit_ord_est, type = "response", newdata = nd) |>
posterior_draws() |>
transform(type = "Response")
ord_pred <- conditional_effects(fit_ord_est)[[1]]
library(dplyr)
ord_pred %>%
ggplot(aes(y=estimate__,x=step_number)) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
library('ggplot2')
ord_pred %>%
ggplot(aes(y=estimate__,x=step_number)) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
plot_predictions(fit_ord_est, condition = "step_number")
ord_pred
ord_pred <- conditional_effects(fit_ord_est, conditions = "step_number")[[1]]
ord_pred <- conditional_effects(fit_ord_est, effects = "step_number")[[1]]
ord_pred
ord_pred %>%
ggplot(aes(y=estimate__,x=step_number)) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
ord_pred <- conditional_effects(fit_ord_est, effects = "step_number: 1:100")[[1]]
ord_pred <- conditional_effects(fit_ord_est, effects = "step_number")[[1]]
conditions <- data.frame(step_number = 1:100)
ord_pred <- conditional_effects(fit_ord_est, effects = "step_number", conditions = conditions)[[1]]
ord_pred %>%
ggplot(aes(y=estimate__,x=step_number)) +
geom_ribbon(aes(ymin=lower__,
ymax=upper__),fill="blue",
alpha=0.5) +
geom_hline(yintercept=1,linetype=2) +
geom_line() +
scale_y_continuous(labels=scales::percent_format()) +
labs(y="% l",
x="step_number")
ord_pred
ord_pred <- conditional_effects(fit_ord_est, effects = "step_number", conditions = conditions)
ord_pred
#conditions <- data.frame(step_number = 1:100)
ord_pred <- conditional_effects(fit_ord_est, effects = "step_number:c(1,10)")[[1]]
ord_pred <- conditional_effects(fit_ord_est, effects = data.frame(step_number = 1:100))[[1]]
conditions <- data.frame(step_number = c(1, 10, 100))
plot(conditional_effects(fit_ord_est, effects = "step_number", conditions = conditions))
plot(conditional_effects(fit_ord_est, conditions = conditions))
conditions <- data.frame(step_number = c(1, 10))
plot(conditional_effects(fit_ord_est, conditions = conditions))
plot(conditional_effects(fit_ord_est, conditions = make_conditions(fit_ord_est, step_number = c(1, 10 ,100))))
plot(conditional_effects(fit_ord_est, conditions = make_conditions(fit_ord_est, vars = c(1, 10 ,100))))
load("~/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/df.csv")
summary(fit_ord_est)
plot(summary(fit_ord_est))
plot(fit_ord_est)
plot(conditional_effects(fit_ord_est))
d2 = df %>%
filter(!is.na(l)) %>%
mutate(predicted = predict(fit_ord_est, type = "response")[ , 1])
# plot predicted probability
ggplot(d2, aes(x = step_number, y = predicted, color = arm)) +
geom_smooth(se = F) +
labs(x = "Step number", y = "R")
# plot predicted probability
ggplot(d2, aes(x = step_number, y = predicted, color = arm)) +
labs(x = "Step number", y = "R")
# plot predicted probability
ggplot(d2, aes(x = step_number, y = predicted, color = arm)) + labs(x = "Step number", y = "R")
# plot predicted probability
ggplot(d2, aes(x = step_number, y = predicted)) + labs(x = "Step number", y = "R")
# plot predicted probability
ggplot(d2, aes(x = step_number, y = predicted, color = step_number)) + labs(x = "Step number", y = "R")
d2
plot(conditional_effects(fit_ord_est))
newdata <- data.frame(step_number = 1:100)
predict(object = fit_ord_est,
newdata = newdata,
type = "response",
re_formula = NA)
y <- predict(object = fit_ord_est,
newdata = newdata,
type = "response",
re_formula = NA)
y
qqplot(newdata$step_number, y)
y
qqplot(newdata$step_number, y$Estimate)
hypothesis(fit_ord_est)
help hypothesis
hypotheses(fit_ord_est, hypothesis = "step_number = 0")
hypotheses(fit_ord_est, "step_number = 0")
fit_ord_est
NewData <- df
Predictor <- "step_number"
NewData[,Predictor] <- range(df[,Predictor])
df[,Predictor
df[,Predictor
df[,Predictor]
NewData[,Predictor
Predictor <- "step_number"
newdata <- data.frame(step_number = 1:100)
Fitted <- fitted(fit_ord_est, newdata = newdata)[,1,]
newdata <- data.frame(step_number = 1:100, species = "S._ambiguus")
Fitted <- fitted(fit_ord_est, newdata = newdata)[,1,]
newdata <- data.frame(step_number = 1:100, species = "S._ambiguus", beetle = "Ambig_03")
Fitted <- fitted(fit_ord_est, newdata = newdata)[,1,]
Fitted <- fitted(fit_ord_est, newdata = newdata)
Fitted
conditional_effects(fit_ord_est, "step_number", conditions = newdata[1,], categorical = T)
conditional_effects(fit_ord_est, "step_number", conditions = newdata[1,])
conditional_effects(fit_ord_est, "step_number", conditions = newdata)
newdata
newdata <- data.frame(step_number = 1:10, species = "S._ambiguus", beetle = "Ambig_03")
conditional_effects(fit_ord_est, "step_number", conditions = newdata, re_formula = NA)
newdata <- data.frame(step_number = 1:10)#, species = "S._ambiguus", beetle = "Ambig_03")
conditional_effects(fit_ord_est, "step_number", conditions = newdata, re_formula = NA)
conditional_effects(fit_ord_est, "step_number", conditions = newdata, re_formula = NA, allow_new_levels = TRUE)
conditional_effects(fit_ord_est, "step_number", conditions = newdata, allow_new_levels = TRUE)
conditional_effects(fit_ord_est, "step_number", conditions = newdata, re_formula = NA, allow_new_levels = TRUE)
Fitted <- fitted(fit_ord_est, newdata = newdata, re_formula = NA)
Fitted
predict(fit_ord_est, newdata = newdata, re_formula = NA)
predict(fit_ord_est)
plot(newdata$step_number, p)
p <- predict(fit_ord_est, newdata = newdata, re_formula = NA)
plot(newdata$step_number, p)
newdata <- data.frame(step_number = 1:10)#, species = "S._ambiguus", beetle = "Ambig_03")
f <- fitted(fit_ord_est, newdata = newdata, re_formula = NA)
p <- predict(fit_ord_est, newdata = newdata, re_formula = NA)
plot(newdata$step_number, p)
newdata$step_number
p
View(p)
View(p)
write.csv(f, "fitted.csv")
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
f
as.data.frame(f)
ff <- as.data.frame(f)
ff.Estimate
ff$Est.Error
ff$step = newdata$step_number
ff
f <- as.data.frame(fitted(fit_ord_est, newdata = newdata, re_formula = NA))
f$step_number = newdata$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
newdata <- data.frame(step_number = 1:1000)#, species = "S._ambiguus", beetle = "Ambig_03")
f <- as.data.frame(fitted(fit_ord_est, newdata = newdata, re_formula = NA))
f$step_number = newdata$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
f <- as.data.frame(predict(fit_ord_est, newdata = newdata, re_formula = NA))
f$step_number = newdata$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/predicted.csv")
newdata <- data.frame(step_number = 1:100)#, species = "S._ambiguus", beetle = "Ambig_03")
f <- as.data.frame(fitted(fit_ord_est, newdata = newdata, re_formula = NA))
f$step_number = newdata$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
f <- as.data.frame(predict(fit_ord_est, newdata = newdata, re_formula = NA))
f$step_number = newdata$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/predicted.csv")
conditional_effects(fit_ord_est, "step_number", re_formula = NA)
newdata <- data.frame(step_number = 10:40)#, species = "S._ambiguus", beetle = "Ambig_03")
f <- as.data.frame(fitted(fit_ord_est, newdata = newdata, re_formula = NA))
f$step_number = newdata$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
f <- as.data.frame(predict(fit_ord_est, newdata = newdata, re_formula = NA))
f$step_number = newdata$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/predicted.csv")
conditional_effects(fit_ord_est, "step_number", re_formula = NA)
conditional_effects(fit_ord_est, "step_number")
newdata <- data.frame(step_number = 1:100)#, species = "S._ambiguus", beetle = "Ambig_03")
f <- as.data.frame(fitted(fit_ord_est, newdata = newdata, re_formula = NA))
f$step_number = newdata$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
newdata <- data.frame(step_number = 1:1000)#, species = "S._ambiguus", beetle = "Ambig_03")
f <- as.data.frame(fitted(fit_ord_est, newdata = newdata, re_formula = NA))
f$step_number = newdata$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
f <- as.data.frame(fitted(fit_ord_est, re_formula = NA))
f$step_number = newdata$step_number
f <- as.data.frame(fitted(fit_ord_est, re_formula = NA))
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
f <- as.data.frame(fitted(fit_ord_est, re_formula = NA))
f$step_number = df$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
range(df$step_number
)
seq(range(df$step_number
)
)
do.call(seq, as.list(range(df$step_number)))
x <- range(df$step_number)
seq(x[1], x[2], length=10)
df.len
df.length
x <- range(df$step_number)
newdata <- data.frame(step_number = seq(x[1], x[2], length=110))#, species = "S._ambiguus", beetle = "Ambig_03")
f <- as.data.frame(fitted(fit_ord_est, newdata = newdata, re_formula = NA))
f$step_number = newdata$step_number
write.csv(f, "/home/yakir/flightless Circellium bacchus (Fabricius) and flight ball-rolling dung beetles/fitted.csv")
testDispersion(fit_ord_est)
library(DHARMa)
fit_ord_estfit_ord_est
testDispersion(fit_ord_est)
View(fit_ord_est)
View(fit_ord_est)
library(readr)
library(ordbetareg)
install.packages(c("ape", "BH", "bit", "bit64", "bslib", "classInt", "cli", "collapse", "cpp11", "curl", "data.table", "DHARMa", "evaluate", "fontawesome", "fs", "future.apply", "ggeffects", "gtable", "inline", "insight", "jsonlite", "knitr", "later", "lme4", "lpSolve", "marginaleffects", "matrixStats", "mvtnorm", "openssl", "ordbetareg", "parallelly", "pillar", "pkgbuild", "posterior", "processx", "promises", "ps", "purrr", "QuickJSR", "R6", "Rcpp", "RcppParallel", "Rdpack", "reformulas", "rlang", "rmarkdown", "rstan", "sf", "shiny", "tinytex", "TMB", "units", "withr", "xfun", "zoo"))
install.packages("units")
data <- read.csv("~/new_projects/Elin/code/indoors/analyse/data.csv")
View(data)
library(betareg)
install.packages("betareg")
library(betareg)
gy_logit <- betareg(mean_resultant_vector ~ r*condition, data)
predict(gy_logit, data)
predict(gy_logit, data, interval="confidence", level=0.95)
predict(gy_logit, data, interval="confidence", level=0.95)
predict(gy_logit, data, type = "respopnse", interval="confidence", level=0.95)
predict(gy_logit, data, type = "respopnse")
predict(gy_logit, data, type = "respopnse")
predict(gy_logit, data, type = "response")
predict(gy_logit, type = "quantile", at = c(0.025, 0.975))
predict(gy_logit, type = "quantile", at = c(0.025, 0.975))
newdata <- data.frame(r = seq(0, 30, length = 100), mean_resultant_vector = c("remain", "dark", "dark enduced"))
seq(0, 30, length = 100
predict(gy_logit, data)
seq(0, 30, length = 100)
outer(2:5, 2:5)
outer(2:5, 1:5)
vec1 <- c("A", "B", "C")
vec2 <- c(1, 2, 3, 4)
# Create a dataframe with all unique combinations
df <- expand.grid(vec1, vec2)
df
r <- seq(0, 30, length = 100),
newdata <- expand.grid(r, mean_resultant_vector)
r <- seq(0, 30, length = 100),
r <- seq(0, 30, length = 100),
r <- seq(0, 30, length = 100)
mean_resultant_vector <- c("remain", "dark", "dark enduced")
newdata <- expand.grid(r, mean_resultant_vector)
newdata
r <- seq(0, 30, length = 100)
mean_resultant_vector <- c("remain", "dark", "dark enduced")
newdata <- expand.grid(r, mean_resultant_vector)
colnames(newdata) <- c("r", "mean_resultant_vector")
predict(gy_logit, newdata, type = "quantile", at = c(0.025, 0.975))
r <- seq(0, 30, length = 100)
condition <- c("remain", "dark", "dark enduced")
newdata <- expand.grid(r, condition)
colnames(newdata) <- c("r", "condition")
predict(gy_logit, newdata, type = "quantile", at = c(0.025, 0.975))
View(data)
condition <- c("remain", "dark", "dark induced")
newdata <- expand.grid(r, condition)
colnames(newdata) <- c("r", "condition")
predict(gy_logit, newdata, type = "quantile", at = c(0.025, 0.975))
f <- predict(gy_logit, newdata, type = "quantile", at = c(0.025, 0.5, 0.975))
write.csv(f, "fitted mean_resultant_vector.csv")
setwd("/home/yakir/new_projects/Elin/code/indoors/analyse")
write.csv(f, "fitted mean_resultant_vector.csv")
f <- predict(gy_logit, newdata, type = "quantile", at = c(0.025, 0.5, 0.975))
f <- as.data.frame(f)
f$r = newdata$r
f$condition = newdata$condition
write.csv(f, "fitted mean_resultant_vector.csv")
df <- read_delim("data.csv", delim = ",")
df <- read_csv("data.csv", delim = ",")
df <- read.csv("data.csv", delim = ",")
df <- read.csv("data.csv")
df
library(betareg)
setwd("/home/yakir/new_projects/Elin/code/indoors/analyse")
data <- read.csv("data.csv")
gy_logit <- betareg(mean_resultant_vector ~ r*condition, data)
r <- seq(0, 30, length = 100)
condition <- c("remain", "dark", "dark induced")
newdata <- expand.grid(r, condition)
colnames(newdata) <- c("r", "condition")
f <- predict(gy_logit, newdata, type = "quantile", at = c(0.025, 0.5, 0.975))
f <- as.data.frame(f)
f$r = newdata$r
f$condition = newdata$condition
write.csv(f, "fitted mean_resultant_vector.csv")
library(emmeans)
install.packages("emmeans")
library(emmeans)
? untidy
m <- betareg(mean_resultant_vector ~ r*condition, data)
emm_betareg <- emmeans(m, type = 'response')
emm_betareg <- emmeans(m, c("r", "condition"), type = 'response')
emm_betareg
emm_betareg <- emmeans(m, c("r"), by = "condition", type = 'response')
emm_betareg
emm_betareg <- emmeans(m, r*condition, type = 'response')
emm_betareg <- emmeans(m, ~ r*condition, type = 'response')
emm_betareg
library(betareg)
setwd("/home/yakir/new_projects/Elin/code/indoors/analyse")
data <- read.csv("data.csv")
m <- betareg(mean_resultant_vector ~ r*condition, data)
r <- seq(0, 30, length = 100)
condition <- c("remain", "dark", "dark induced")
newdata <- expand.grid(r, condition)
colnames(newdata) <- c("r", "condition")
f <- predict(m, newdata, type = "quantile", at = c(0.025, 0.5, 0.975))
f <- as.data.frame(f)
f$r = newdata$r
f$condition = newdata$condition
write.csv(f, "fitted mean_resultant_vector.csv")
library(emmeans)
emm_betareg <- emmeans(m, ~ r*condition, type = 'response')
emm_betareg
emm_betareg <- emmeans(m, "r", type = 'response')
emm_betareg
emm_betareg <- emmeans(m, "r", type = 'quntile')
emm_betareg
